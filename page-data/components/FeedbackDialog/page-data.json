{
    "componentChunkName": "component---src-pages-components-feedback-dialog-mdx",
    "path": "/components/FeedbackDialog/",
    "result": {"pageContext":{"frontmatter":{"title":"FeedbackDialog","description":"Allow visitors to your website to provide feedback through a dialog"},"relativePagePath":"/components/FeedbackDialog.mdx","titleType":"page","MdxNode":{"id":"fea9caeb-7a7b-5ec2-8d56-55ae8204e2b6","children":[],"parent":"143b56f9-b818-5ec2-8400-c609bd55100a","internal":{"content":"---\r\ntitle: FeedbackDialog\r\ndescription: Allow visitors to your website to provide feedback through a dialog\r\n---\r\n\r\n<PageDescription>\r\n\r\nThe `<FeedbackDialog>` component is a non-modal dialog that allows your users to\r\nprovide low-friction, anonymous feedback for a specific page.\r\n\r\n</PageDescription>\r\n\r\n## Activating the dialog\r\n\r\nThe Feedback button only becomes visible once you've supplied an `onSubmit`\r\nhandler. To do that, we'll need to shadow the `FeedbackDialog` component.\r\n\r\n1. Create a new javascript file under\r\n   `src/gatsby-theme-carbon/components/FeedbackDialog/FeedbackDialog.js`.\r\n   Matching the filepath exactly is important here.\r\n\r\n2. Copy the following snippet into your new file\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport ThemeFeedbackDialog from 'gatsby-theme-carbon/src/components/FeedbackDialog/FeedbackDialog';\r\n\r\nconst FeedbackDialog = ({ props }) => {\r\n  const onSubmit = (data) => {\r\n    console.log({ ...data });\r\n  };\r\n\r\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\r\n};\r\n\r\nexport default FeedbackDialog;\r\n```\r\n\r\n## Creating a handler\r\n\r\nNext, you'll need a place to send the data. For the Carbon website, we use a\r\nserverless function that forwards the data to a\r\n[SurveyGizmo](https://www.surveygizmo.com/) quiz. You can see that function\r\n[here](https://github.com/carbon-design-system/carbon-website/blob/master/api/survey.ts).\r\n\r\nThe handler can send a fetch request off to the endpoint you create. Update the\r\n`onSubmit` handler to send the data wherever you want. This function receives\r\nthe following arguments:\r\n\r\n- `experience`: \"Negative\", \"Positive\" or \"Neutral\"\r\n- `comment`: An optional comment\r\n- `path`: the window location when the survey was submitted\r\n\r\n```jsx\r\nconst FeedbackDialog = ({ props }) => {\r\n  const onSubmit = data => {\r\n    fetch(process.env.API_ENDPOINT, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n  });\r\n\r\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\r\n};\r\n```\r\n","type":"Mdx","contentDigest":"597ce2eb70a8af48347b86170a726127","owner":"gatsby-plugin-mdx","counter":210},"frontmatter":{"title":"FeedbackDialog","description":"Allow visitors to your website to provide feedback through a dialog"},"exports":{},"rawBody":"---\r\ntitle: FeedbackDialog\r\ndescription: Allow visitors to your website to provide feedback through a dialog\r\n---\r\n\r\n<PageDescription>\r\n\r\nThe `<FeedbackDialog>` component is a non-modal dialog that allows your users to\r\nprovide low-friction, anonymous feedback for a specific page.\r\n\r\n</PageDescription>\r\n\r\n## Activating the dialog\r\n\r\nThe Feedback button only becomes visible once you've supplied an `onSubmit`\r\nhandler. To do that, we'll need to shadow the `FeedbackDialog` component.\r\n\r\n1. Create a new javascript file under\r\n   `src/gatsby-theme-carbon/components/FeedbackDialog/FeedbackDialog.js`.\r\n   Matching the filepath exactly is important here.\r\n\r\n2. Copy the following snippet into your new file\r\n\r\n```jsx\r\nimport React from 'react';\r\nimport ThemeFeedbackDialog from 'gatsby-theme-carbon/src/components/FeedbackDialog/FeedbackDialog';\r\n\r\nconst FeedbackDialog = ({ props }) => {\r\n  const onSubmit = (data) => {\r\n    console.log({ ...data });\r\n  };\r\n\r\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\r\n};\r\n\r\nexport default FeedbackDialog;\r\n```\r\n\r\n## Creating a handler\r\n\r\nNext, you'll need a place to send the data. For the Carbon website, we use a\r\nserverless function that forwards the data to a\r\n[SurveyGizmo](https://www.surveygizmo.com/) quiz. You can see that function\r\n[here](https://github.com/carbon-design-system/carbon-website/blob/master/api/survey.ts).\r\n\r\nThe handler can send a fetch request off to the endpoint you create. Update the\r\n`onSubmit` handler to send the data wherever you want. This function receives\r\nthe following arguments:\r\n\r\n- `experience`: \"Negative\", \"Positive\" or \"Neutral\"\r\n- `comment`: An optional comment\r\n- `path`: the window location when the survey was submitted\r\n\r\n```jsx\r\nconst FeedbackDialog = ({ props }) => {\r\n  const onSubmit = data => {\r\n    fetch(process.env.API_ENDPOINT, {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n  });\r\n\r\n  return <ThemeFeedbackDialog {...props} onSubmit={onSubmit} />;\r\n};\r\n```\r\n","fileAbsolutePath":"C:/Users/905693897/github-doug/Instana-HalfDay-Partner-Workshop/src/pages/components/FeedbackDialog.mdx"}}},
    "staticQueryHashes": ["1364590287","137577622","2102389209","2456312558","2746626797","3018647132","3037994772","768070550"]}